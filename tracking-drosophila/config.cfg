/************************ TRACKING_DROSOPHILA CONFIGURATION FILE ****************************
******                                                                                 ******
******	This file contains the configuration parameters of the application           ******
****** 	                                                                             ******
******	WARNING: Modify only the field corresponding to the parameter value          ******
******	( = value ;)                                                                 ******
******	Otherwise, the program could fail and provide unexpected result.             ******
******                                                                                 ******
******	Making a backup copy of the original file is recommended.                    ******
******	Making a backup copy of the configuration files generated by the user is     ******
******	also recommended.                                                            ******
******	Default options will be used whenever the configuration file is not found.   ******
******                                                                                 ******
********************************************************************************************/
	
version = 1.0;

/**** PREVIOUS NOTES CONCERNING CONFIGURATION ****/

/*	The following aspects should be taken into account before changing the configuration parameters:
	- Notation and variable data types (integer numeric values, floating point values, Booleans) should be observed.
            Those values notated in integer format (resp. floating point, and Boolean format) should keep the same type.
	  Changing the floating point value 0.0 to 0 could produce reading errors. 
	  A boolean should take true (1) or false (0) values.
	- A reading error or an improper parameter value detected during the config file reading will result in 
            assigning a default value to the current parameter. A warning message showing the default value assigned 
            to the parameter will be displayed in the console.
	- If option Auto is set to true in a given field, the values in this field will be ingnored and the default value
	  Will be assigned instead. NOTE: Some fields do not have the Auto option.
	- Some parameters can be assigned a default value without using Auto mode expressly. (This possibility is noted
	  in the parameter comments.) */ 
	
/****  EXECUTION ****/
		
/*	In order to launch the program, please write the following via console: 
	$./TrackingDrosophila [video_name.avi] [file_name.csv]  
	Where:
	[video_name.avi] is the name of the video file under analysis. Videos should be provided in AVI format. 
	Codecs  ffmpeg  should be present in the system.
	[file_name.csv] is the name of the file where the results will be stored.
	In the file_name is not provided, the program will ask for it. If no answer is given, the program will use
	[Data_n] as default name (n within 1 to 29). 
*/


/****************************** GENERAL OPTIONS *******************************/
	General:
	{
	    Auto = false;
	    
		MaxFlat = 90.0 ;	// VALUES: plate diameter (in mm). 
							//	- This parameter is used for calibrating the camera.
							// If no value is provided, distances will be provided in pixels. 
							// Otherwise, once the plate is found by the software, the value
							// provided here will be used for obtaining the pixel/mm scale value.
		
		FPS = 0;		    // Video frames per second. This value is used for computing the time.
							// 0 value will force the software to autodetect fps.
							// NOTE:  Some videos may contain an incorrect fps, which would result
							// in incorrect time measures. In the fps displayed during the program 
							// Execution is different than that of the video, the current parameter should
							// be set here to the correct value.
							// This problem has been observed in *.wmv format. MPEG coding is recomended.
		
		TotalFrames = 0.0;    //9570.0	// Number of frames of the video. It is used for displaying the analysis
							// progress and for computing the background-model updating times.
							// 0 value force automatic detection.
							// NOTE: As in the case of FPS, some videos may contain an incorrect number 
							// of frames. In this case, the current parameter should be set here to the 
							// correct value.
		
		InitDelay = 50;  	// - First x frames will be ignored.
							// Use larger or smaller values depending on the image stability during the first frames. 
							// -1 value force the software to use the default value.
		
		MedirTiempos = false;		// - Activates the time measuring corresponding to the different modules
							// (pre_processing, processing, tracking, statistics and display)
	};
	
	/******************************* STATISTIC MODULE CONFIGURATION ******************************/
	
	/* This module allows configuring the statistic options. */
	// NOTE: Further options can be set through the display parameters and the Kalman filter parameters.
	
	Statistics:	
	{		
		Auto = false;				// If true, the default parameter values will be used.
		
		CalcStatsMov = true; 			// Switch true/false to activate the computation of the movement statistics.
	
		MaxBufferTime = 234000;			// Max time period (in secs) for the moving average used for computing the
 									// average movement in a frame. This average movement is computed by adding 
									// the movement of every fly.
									// VALUES: 1,30,60,300,600,900,1800,3600, 7200,14400,28800,57600,115200,234000
									// Eg. 1 value means that the statistics corresponding to the last second
 									// will be computed. 234000 value (48 hours) means that the statistics  
							// 0 value means that the maximum value (234000) will be used.
									// NOTE: This value should be selected by keeping in mind the computing
									// resources. Assuming a 30 FPS rate, a 234000 value (48 hours) will require 
									// dealing with a vector of 7020000 elements. 
		
		MuestrearLinea = false;			// Select a 100 pixel sample along a horizontal line, placed about the image
									// centre. Result is stored in a  .csv  file. These values are used for 
									// the precise calibration of the background model (upon an statistic
									// analysis).
	};
	
	/******************************* DISPLAY MODULE CONFIGURATION  ******************************/
	
	
	
	Visualizacion:	
	{ 
		
		// GENERAL OPTIONS
		
		Auto = false;
		
		RecWindow = false;				// Switch to 1 for recording the display window. This option can be activated 
									// without regarding the general display option.
		
		ShowWindow = true; 				// Switch GENERAL to 1 for showing the dispay window.
									// NOTE: The following parameters will be ignored in ShowWindows is set to false. 
		
		ShowPresent = false;			// Switch to 1 for displaying the initial presentation.
							    
		ShowTransition = false;			// Switch to 1 to show animations between different process stages.
		
		HightGUIControls = false;			// Activates the following display controls (during program execution):
							/* VALUES:
										p : pause until c is pressed.
										r : starts result video recording
										s : strops result video recording
										f : steps frame by frame, until c is pressed 
										c : continue normal execution 
										g : .jpeg  snapshot (only in pause mode)
											*/

		Zoom = 2;					// VALUES: {1,2,3,5,6}
								// Zoom in the blob shown in windows without track
	
		// GRAPH 1 PARAMETERS. Bar chart.
		// A bar chart is displayed, showing the blob activity level. This level will depend on the average 
		// speed of the blob, which in turn is linked to the moving average time (that can be tuned in the
		// TrackingParams module, along with the activity threholds. The maximum speed will be also displayed.

		
		G1escalaY = 6.0;				// VALUES: ( 0, -- ] 
									// Y axis scale.
		
		// GRAPH 2. PARAMETERS. History
		// History of the average movement throughout a given time period is plotted.
		// The larger the average time is, the smoothest the plot will be.
		// The axis scales can also be configured. (See statistic section for further details.)
		
		ShowStatsMov = true;			// Switch to 1 for displaying movement statistics and graph 1 in the
									// tracking windows

		G2escalaY = 1.0;				// VALUES: ( 0, -- ] 
									//  Scale of axis Y.
		

		PeriodoSec = 0.1;				// VALUES: ( 0, -- ] in secs
									// NOTE: the history will be  590 * PeriodoSec
									// 0.1 * 590 => 59 video secs

		graficarEl = 1;				/* VALUES:
										1: movement averaged through 1 s
										2: movement averaged through 30 s
										3: movement averaged through 1 min
										4: movement averaged through 10 min
										5: movement averaged through 1 H
										6: movement averaged through 2 H
										7: movement averaged through 4 H
										8: movement averaged through 8 H
										9: movement averaged through 16 H
										10: movement averaged through 24 H
										11: movement averaged through 48 H
											*/
		// COMPLETE MODE
		/* In this mode, the windows showing the results of the different modules will be activated.
		   Moreover, this mode allows configuring some parameters related to the different modules through run-time
		   TrackBars. This mode uses a significant amount of resources, so it is only recommended for parameter setup. */

		ModoCompleto = false;			// GENERAL switch true/false for displaying the results of the different modules.
									// NOTE1: Activating this option will affect the computer performance.
									// NOTE2: the following parameter will be ignored when ModoCompleto is set to false.
		// Preprocessing results
		
		ShowLearningFlat = true;
		ShowInitBackground = true;
		ShowShapeModel= true; 			// Switch true/false for displaying the results of the shape model.
		
		// Processing results
		
		ShowProcessPhases = false; 			// Switch true/false for displaying the processing results, step by step.
		ShowValidationPhases = false;			// Switch true/false for displayinv validation images, step by step. 
		ShowBGremoval = true; 			// Switch true/false for displaying the Background and the Foreground.
		ShowBGdiffImages  = false;	 		// Switch de 0 a 1 for sidplaying images before and after foreground clean.
		
		// Tracking results. Kalman filter.
		
		ShowKalman = true;
	
	
	};
	

	/******************************* PRE-PROCESSING MODULE CONFIGURATION  ******************************/
	
	Preprocesado:
	{		
					// BACGROUND MODEL //	

		// For further details, see:
		// - NIHMS109817-supplement-1
		// - Background subtraction techniques:a review. Massimo Piccardi
		// - Detecting Moving Objects, Ghosts, and Shadows in Video Streams. Rita Cucciara
		// - Learning OpenCv
		
		Auto = false;
			    
		InitBackGroundModel:
		{
			// INITIAL PARAMETERS
			
			Auto = false;
			
			FlatDetection = true;		// - Activates plate detection.
									// When false, the program speed and the camera calibration will be
									// affected. (In particular, measures will be displayed in pixels/sec 
									// instead of mm/sec). 


			FLAT_FRAMES_TRAINING = 500;		// Number of frames used for detecting the plate.
									// To be modified if the plate activation fails.

							// This value will be ignored if plate detection has not been activated.
							// If set to 0: default value (500 frames) will be used. 
			
			MODEL_TYPE = 4;			// - Model type can be:
									/*	1) GAUSSIAN 1 Gaussian model without selective updating
										2) GAUSSIAN_UP 2 Gaussian model with selective updating 
										3) MEDIAN 3 Median model without selective updating
										4) MEDIAN_S_UP 4 Median model without selective updating
									 */
			
			BG_Update = 5;			// VALUE: Int. [ 1 , 20 ]
										// Background updating. Set to 1 for noisy videos.
										// 0 value will force the program to use the default value (1)
			
			initDelay = 50;			// VALUE: Int. [ 0 , -- ]
										// - First x frames will be ignored.
										// Set to a larger/smaller value depending on the image stability
										// during the first frames.

			
			Jumps = 10;			// VALUE: Int. [ 0 , -- ]
										// Jumps are performed throughout the video for minimizing 
										// the possibility of having blobs in the bakground model.
										// This allows detecting all the blobs in the first
										// processing iteration.
			
			FRAMES_TRAINING = 700;		// VALUES: [ 100, -- ]
										// - TRainning frames for learning the background. Set so that
										// a blob-free bacgound model is obtained.
							 
			INITIAL_DESV = 0.05;		// - Initial standard deviation of the background gaussian model. 
										// Set to a small value for an unimodal, noise-free backgound.

			K = 0.6745;			// MAD ( Median Absolute Deviation )correction parameter
										//for estimating the standard deviation of the gaussian model
										//This parameter will be also used for updating the shape model
			

			
		};	

					// SHAPE MODEL //	
		
		// The following parameters are used to configure the shape model. They can affect the average and standard 
		// deviation of the blobs area, thus resulting in a more/less restrictive validation.

		
		// For further details, see:
		// - NIHMS109817-supplement-1
		// - Background subtraction techniques:a review. Massimo Piccardi 	
		// - Detecting Moving Objects, Ghosts, and Shadows in Video Streams. Rita Cucciara
		// - Learning OpenCv	
				
		ShapeModel:	
		{	
		
			Auto = false;
			
			LOW_THRESHOLD = 15;			// VALUES: Int [1,255]
										// Threshold value for considered objects as Foreground.
										// 1 to 25 values are recommended, depending
										// on the foreground-to-background contrast.
										// The larger this value is, the lowest the blob are will be.

			
			/// PARAMETERS FOR FG CLEANING 
			
			MORFOLOGIA = true;			// Use morphologic operations (erosion, dilation)
										// on the image resulting from BG substraction
			CVCLOSE_ITR = 1;			// Nb of times the morphology operators are applied.
			MAX_CONTOUR_AREA = 0 ; 		// VALOE: pixels - Blobs sized over MAX_CONTOUR_AREA will be removed
			MIN_CONTOUR_AREA = 10; 		// VALUE: pixels- Blobs sized under MAX_CONTOUR_AREA will be removed 
			HIGHT_THRESHOLD = 20;		// Threshold for FG cleaning. After BG substraction, those blobs whithout 
										// any pixel valued over this value will be removed.
										// This value is used for remobing noise, shadows, etc. 
											
			SHOW_DATA_AREAS = true;		// Display (in the console) the resulting shape model.	
			FramesTraining = 200;		// Nb of frames used for shape model training.	
			Max_Area = 100			// Those blobs sized over this area will be ignored for computing the shape model. 

			Max_Perimeter = 1000		// Those blobs sized over this perimeter will be ignored for computing the shape model. 
				
		};
	};

	/******************************* PROCESSING MODULE CONFIGURATION  ******************************/
			
	Procesado:
	{		
			Auto = false;
			
			BGModel:
			{	
				Auto = false;

				MODEL_TYPE = 4;
				BG_Update = 40;		//NOTE: This parameter can be tuned in run-time through a trackbar (in complete mode).
				LOW_THRESHOLD = 20;		//NOTE: This parameter can be tuned in run-time through a trackbar (in complete mode).

				/// PARAMETERS FOR FG CLEANING 

				MORFOLOGIA = true;	
				CVCLOSE_ITR = 1;	
				MAX_CONTOUR_AREA = 0 ; 
				MIN_CONTOUR_AREA = 0; 
				HIGHT_THRESHOLD = 30;	//NOTE: This parameter can be tuned in run-time through a trackbar (in complete mode).
	 		};

	 		Validacion:
	 		{
	 			Auto = false;
	 				
				/// PARAMETERS FOR FG CLEANING 

			 	MODEL_TYPE = 4;	
			 	MORFOLOGIA = false;
				CVCLOSE_ITR = 0;
				MAX_CONTOUR_AREA = 0 ;
				MIN_CONTOUR_AREA = 0; 
				HIGHT_THRESHOLD = 30;
				LOW_THRESHOLD = 20;
				
				CleanGhosts = true;		// At present, this option is only efective with circle-shaped plates 
										// (given that calibration has been correctly done). Blobs corresponding to 
										// reflections at the plate boundary will be removed. These blobs can also 
										// be removed by tuning the thresholds corresponding to the BG substraction.

										// Heuristics is also used for detecting and removing ghost tracks, regardless CleanGhosts value. 

				umbralCleanGhosts = 3 ;	// VALUES [1 , --] Units: pixels
										// Sets the area for the reflection cleanning module.
										// Validation area =  R +- UmbralCleanGHost;

										//NOTE: This parameter can be tuned in run-time through a trackbar (in complete mode).

				/// VALIDATION PARAMETERS ///
				
				UmbralCirc = 0;
				
				Umbral_H = 5.0;		// Sets the max valid blob to Umbral_H times the standard deviation (with respect to the average value). 
										// When the area of a given blob is too low, the threshold used for BG
										// substraction increases in order to check for an area increase 
										//(which would mean that the blob is not a spurious). 

				Umbral_L = 5.0;		// Sets the min valid blob to Umbral_L times the standard deviation (with respect to the average value). 
										// When the area of a given blob is too large, the threshold used for BG 
											// substraction decreases in order to check for a blob split 
										// (which would mean that the blob corresponds actually to two flies). 

				
				Umbral_MinArea = 5;		// VALUES: [ 5, -- ]. 0 value results in ignoring this parameter.
										// Non 0 value will be assumed to be the limit of the low-threshold increase. 
										// NOTE: Two low a value may result in tracking errors

				MaxDecLTHIters = 100; 	// Nb max of times the low threshold can be decremented. 

				MaxIncLTHIters= 100;  	// Nb max of times the low threshold can be incremented. 
										// NOTE: Too low a value may result in an incorrect split of a two (or more) flies blob.

				MaxLowTH = 1000; 		// Upper limit for the low threshold. 
										// NOTE: Too low a value may result in an incorrect split of a two (or more) flies blob.

				MinLowTH = 1;		// Lower limit for the low threhold.
			};
	};
	
	/******************************* TRACKING MODULE CONFIGURATION  ******************************/
	
	TrackingParams:
	{
		// General
		
		Auto = false;
	
		MaxBlobs = 8 ;				// Max Nb of element to be tracked. 
		
		
		ShowKalmanData = false ;
		

		MaxBuffer = 50 ;				// Buffer legth. The tracking module keeps this number of frames in memory. This corresponds to storing MAX_BUFFER / FPS video seconds.
									// The larger the buffer lenght is, the most efficient the correction will be (but at a larger memory requirement).
									// Too large a value could affect the computer performances.
									// A max value of 80 is recomended for a Intel(R) Pentium(R) M, 1.73GHz, 1 Gb RAM running Ubuntu 10.10 and GNOME 2.32.0
		MaxTimeSlept = 200;				// Max time (in farmes) to remove a track whenever: 
									// 1) It has lost the tracked element and has not found it again after MAX_TIME_SLEPT frames
									// 2) It is a no-prority tracks (i.e. a track whose is over the nb of blobs).

		NumberOfIdentities = 100;			// Max nb of ids thant the tracks can be assigned. Each time a track is generated, it is assigned an id. During execution, 
									//false blob tracks may be generated ant then removed (ej. tracks corresponding to reflections at the plate border).

		// Track statistics 
		
		PeriodoVelMed = 1.0 ; 			// Time period (in secs) for computing the moving average on the speed of each blob. 
									// Too large a value will afect the computer performance.
									// NOTE: E.g. a 30 FPS and 30 PeriodoVelMed result in a 1 sec moving average (pix/sec).

		MediumActivityTh = 10.0 ;			// VALUES: mm/s if not calibrated, pixels/frame otherwise.
									// Sets the threshold for averge speed (in mm/sec). 
									// Activity is assumed to be AVERAGE when Vmed = ( LowActivityTh, MediumActivityTh ]
									// Activity is assumed to be LARGE when Vmed > MediumActivity.
		
		LowActivityTh = 5.0 ;			// VALUES: mm/s if not calibrated, pixels/frame otherwise.
									// Sets the threshold for AVERAGE speed (in mm/sec). 
									// Activity is assumed to be LOW when Vmed = ( NullActivityTh, LowActivityTh ]
											
		NullActivityTh = 0.2 ;			// VALUES: mm/s if not calibrated, pixels/frame otherwise.
									// Sets the threshold for AVERAGE speed (in mm/sec). 
									// The blob is assumed to be INACTIVE when Vmed <= NullActivityTh. 
		
	};

		/******************************* KALMAN FILTER MODULE CONFIGURATION ******************************/	
		
		/* Kalman filter configuration. PLEASE, BE CAREFUL ! 
¡		 A track is generated, and a kalman filter is initiated for each target element. Kalman filter is used for:
		 - Predicting the fly location at t+1.
		 - Filtering the blob direction (that is considerably affected by measurement noise).
		 Further detaikls: 
		 Stochastic models, estimation, and control VOLUME1 PETER S: MAYBECK 1979
		 Kalman Filters: A tutorial 1999
		 Observadores de Estado en Procesos Estocásticos: El Filtro de Kalman. Daniel Pizarro Pérez
		 Learning OpenCv.*/
	
		Kalman:
		{		
		
			Auto = false;
				
			Inicializacion:
			{
				Velocidad = 10.6; //5.3 	//// VALUES: mm/s if not calibrated, pixels/frame otherwise.
									// Initial linear speed of the blob (in mm/s)

				V_Angular = 10.0 ; //5.2 	//VALUES: º/s
									// Initial angular speed of the blob (in º/s)
				
				MaxJump = 25.0;		//VALUES: mm 
									//Max distance (aprox) that a fly can jump in a given frame 
											//Average distance allowd in Id assignemnt.
				
				T_Vmed = 0.33;		//VALUES: [1, 20]
									// Max Nb of back frames used for computing the average speed used by Kalman filter.

				MaxBack = 5;				// When blob is moving, the algorithm seek to reduce the direction error until MaxVPhiError
											// (by moving back the origin of the speed vector until MaxBack limit value).
											
											// NOTE: This parameter is concerned by fps and image resolution.
											// The influence of this parameter is low for high resolution video. However, this influence is 
											// large for low resolution videos because it results in large reduction of blob direction noise.
											
				MaxVPhiError = 10;		//VALUES: º
									// Max allowable error for the direction computation. The algorithm will move back the origin of the speed vector 
									// (until MaxBack) whenever MaxVPhiError is not reached in order to increase resolution.
			
				
				Q = 2.0 ;					// Q: error corresponding to the system model Wk->N(0,Q): Q = f(F,B y H).
											// This parameter is used for initializing the filter. It affects the convergence speed. 
											// In practice, this parameter represents the lack of knowledge about model
											// Q = ( B,F,H ). P_k' = F P_k-1 Ft + Q
											// The value represents the unit at which the matrix is initialized. 
					 
				R0 = 1;					// Initial uncertainty for location and speed. 
											// R = {  R_x = R0 ,R_y = R0, R_Vx = 2*R0 , R_Vy = 2*R0, R_phiZk = 180, R_w = 360};
											

			};
			
			/* Normal operation of the filter. The filter is given a new measure corresponding to the blob under tracking. Noise will correspod to that of the image acquisition system. (In future
			   versions, a method for estimating the noise could be added for allowing an automatic set of the Alpha parameters  */
			//NOTE: the following parameters can be tuned in run-time through a trackbar (in complete mode).
			   
			CamControl:
			{
				Q = 2.0;
				
				alpha_Rk = 1.0;
				
				AlphaR_phi = 1.0;
				
						
				/* measurement_noise_cov = {	R_x = alpha_Rk*1, 
												R_y = alpha_Rk*1, 
												R_Vx = alpha_Rk + errorVx, 
												R_Vy = alpha_Rk + errorVy, 
												R_phiZk = AlphaR_phi + errorVPhi 
												R_w		=	2*R_phiZk};   */
				
			};
			
			/* Occlusions (blob interaction). A new measure is received, but uncertainty will be higher greater than that of the
			   CamControl case (given that the tracked object is in a blob corresponding to several flies.
			   Alpha values modify the filter gain for this stae, K. This larger is the uncertainty of the measure, the lowest the gain will be.
			   This entails that a higher measure uncertainty will result in a larger weight of the correction (at t+1) with respect to the new measure (at t+1).
			   Therefore, both the correction step and the ulterior prediction step will be affected. 
			   Concerning MaxTimeToPhase1, when a track switchs to the KalmanControl state, this track will follow a first phase (timed MaxTimeToPhase1)
			   during which the location predicted by the filter will be used as the new position. It the blob lies within the predicted trajectory (or near it)
			   for the given time, a second step is entered during which the Kalman filter is given the centre of the blob. This way, the computed location will approach 
			   the center without suffering from a strong position and orientation, while waiting the blob to go about of the occlusion area. 
			   NOTE: This parameter can be tuned in run-time through a trackbar (in complete mode).
			   
			KalmanControl:
			{
				
				MaxTimeToPhase1 = 0.4;	//VALUES:[0.1, 1] units: seg
									// If the position prediction goes out of the highest uncertainty area while the target remains within the blob,
									// then a countdown is started. If the counter reach zero, then the fly position is assigned back the centre of the
									// blob. (bIt is assumed that the fly has stopped at this area.)
									// MaxTimeToPhase1  is the initial value of this parameter.
												/*NOTE:	- For fps = 30, 0.4 value is recommended.
													- For fps = 15, 0.2 value is recommended.
													 
											 	*/
				Q = 2.0;
				
				alpha_Rk = 1.0;
				
				R_phiZk = 1000.0;
				
				/* measurement_noise_cov = {
									R_x = alpha_Rk*Fly->Roi.width/2; // Un factor por la anchura/2 del rectángulo que contiene al blob
									R_y = alpha_Rk*Track->Fly->Roi.height/2; //A height/2 factor is considered (height being the height of the rectangle 
										circumscribing the blob).
										
									R_Vx = alpha_Rk*2*R_x; // A 2 * posición error  factor is considered.
									R_Vy = alpha_Rk*2*R_y;
									R_phiZk = R_phiZk ;
									R_w		= 2*R_phiZk;
				*/					
				
			};
			
		};
		
		
		
		
